#!/usr/bin/env python3
# rtl_433_stats
VERSION="2.2.0"

# Program to catalog devices seen by rtl_433 and  to analyze and summarize
#   device performance data.
# This version analyzes signal-to-noise ratios (SNR), 
#   inter-transmission gap times (ITGT), frequency variations (Freq),
#   and packets per transmission (PPT).
# A "transmission" is a group of one or more packets broadcast to provide information.
# A "packet" is a group of bits sent to communicate that information.
# More than one packet may be sent per transmission in order to increase reliability.
# SNR and Freq statistics are summarized over all packets from each device
# ITGT and PPT summarize statistics on transmissions
#    (starting with the first packet of each transmission)

import sys
import argparse
import fileinput
import json
from json.decoder import JSONDecodeError
import time
import datetime
import math

# Set gap time for packets to be considered to be duplicatd
dup_thresh = 2.0

AP_DESCRIPTION="""
\tAnalyze rtl_433 JSON logs to catalog the devices seen and to characterize
\tstatistically their signal-to-noise ratio (SNR), times between
\ttransmissions (ITGT), radio frequency (Freq), and packets per transmission (PPT).
"""

AP_EPILOG="""
Running:
    python3 rtl_433_stats [options]  [-i <JSON files or .gz files> or defaults to stdin]

"""

##########################################################################################
# Define a class to accumulate basic statistics over a stream of data 
class stats():

   def __init__(self, x):
      self.count = 1
      self.mean  = x
      self.std2  = 0.0
      self.min   = x
      self.max   = x
      
   def append(self,x):
      self.count += 1
      self.mean   = ((self.count-1)*self.mean + x)/self.count
      self.std2   = 0 if self.count<2 else ( (self.count-2)*self.std2 +
                                             (self.count*(self.mean-x)**2)/(self.count-1) )/(self.count-1)
      if self.count > 1:
         self.min = x if x<self.min else self.min
         self.max = x if x>self.max else self.max
      return

   def get(self):
      return (self.count, self.mean, math.sqrt(self.std2), self.min, self.max)
  

##########################################################################################
# Define a class to hold the data for a device and procedures to create, update, access
class Data:
    def __init__(self, snr, eTime, freq, battery, status):
        self.pktcount = 1
        self.xmtcount = 0
        self.pkt_xmt  = 1
        self.last_pkt_time = eTime
        self.last_xmt_time = eTime
        self.battery = battery
        self.status = status
        self.SNR  = None if omitSNR  else stats(snr)
        self.ITGT = None
        self.Freq = None if omitFreq else stats(freq)
        self.PPT  = None
        return

    # Update information about this device and return a
    #  flag to indicate if it was a duplicate record for this xmit
    def update(self, snr, eTime, freq, battery, status):
        self.pktcount += 1
        self.last_pkt_time = eTime
        dup = eTime < self.last_xmt_time + dup_thresh
        if not omitSNR:
            self.SNR.append(snr)
        if not omitITGT and not dup:
            if self.ITGT is None:
                self.ITGT = stats(eTime-self.last_xmt_time)
            else:
                self.ITGT.append(eTime-self.last_xmt_time)
            self.last_xmt_time = eTime
            self.xmtcount += 1
            self.last_xmt_time = eTime
        if not omitFreq:
            self.Freq.append(freq)
        if not omitPPT:
            if not dup:
                if self.PPT is None:
                    self.PPT = stats(self.pkt_xmt)
                else:
                    self.PPT.append(self.pkt_xmt)
                self.pkt_xmt = 0
            self.pkt_xmt += 1
        if battery != self.battery:
            batt_change = True
            self.battery = battery
        else:
            batt_change = False
        if status != self.status:
            stat_change = True
            self.status = status
        else:
            stat_change = False
         
        return (dup, batt_change, stat_change)

    def get(self):
        return (self.pktcount,
                self.xmtcount,
                self.SNR,
                self.ITGT,
                self.Freq,
                self.PPT)

##########################################################################################
#  Routine to reate the command parser, parse cmd line,  and set defaults
def make_parser():
    
    parser = argparse.ArgumentParser(formatter_class=argparse.RawDescriptionHelpFormatter,
                                     description=AP_DESCRIPTION,
                                     epilog=AP_EPILOG)

    parser.add_argument("-i", "--input", metavar="FILE", nargs="*",
                    help="Path to JSON log files to read in; can be .gz; can be wildcard; blank if <stdin>")
    parser.add_argument("-o", "--omit", choices=["SNR", "ITGT", "Freq", "PPT"],
                        nargs="+")
    parser.add_argument("-x", "--exclude_noise", type=int, dest="noise",
                        help="Exclude device records with fewer than 'NOISE' packets seen")
    parser.add_argument("-w", "--xmt_window", dest="window", type=float,
                        help="Max time in sec for a packet group to be considered as one transmission (default: %(default)s)")
    parser.add_argument("-T", "--include_TPMS", action='store_true',
                        dest="include_TPMS", default=False, 
                        help="include tire pressure monitors in catalog (default: %(default)s)")
    parser.add_argument("-v", "--version", action="version", version=VERSION)

    args = parser.parse_args()
    return args

###############################################################################
# Convert time string (ts) from ISO format to epoch time
# Or, if ts is in epoch time, convert to timestamp format.
# Return both formats for use in processing and displaying
def CnvTime(ts):
    if ts.find("-") > 0:
        try:
            eTime = datetime.datetime.fromisoformat(ts).timestamp()
            timestamp = ts
        except ValueError as e:
            err={}
            print("datetime error in input line converting time string: ", ts)
            print("datetime  msg:", err.get("error", str(e)))
            sys.exit(1)
    else:
        try:
            eTime = float(ts)
            timestamp = datetime.datetime.fromtimestamp(eTime)
        except ValueError as e:
            err = {}
            print("Datetime conversion failed on line with datetime string", ts)
            print("float() error msg:", err.get("error", str(e)))
            sys.exit(1)

    return(timestamp, eTime)
# End CnvTime()

##########################################################################################
# main program
start_time = time.process_time()

print("rtl_433_stats:", AP_DESCRIPTION)

args = make_parser()
omitSNR  =  args.omit is not None and "SNR"  in args.omit
omitITGT =  args.omit is not None and "ITGT" in args.omit
omitFreq =  args.omit is not None and "Freq" in args.omit
omitPPT  =  args.omit is not None and "PPT"  in args.omit

firstTime = float('inf')
lastTime  = 0.0
DDTC = 0
devices = {}

print("Processing ISM 433MHz messages recorded by rtl_433")
print("Including" if not omitSNR  else "Excluding", "SNR Stats")
print("Including" if not omitITGT else "Excluding", "ITGT Stats")
print("Including" if not omitFreq else "Excluding", "Freq Stats")
print("Including" if args.include_TPMS else "Excluding", "TPMS devices")
if args.noise is not None:
    print("Excluding devices with fewer than", args.noise, "packets seen")
    noise = args.noise
else:
    noise = 0
if args.window is not None:
   print("Using transmission window of", args.window, "sec rather than deafult", dup_thresh, "sec")
   dup_thresh = args.window

lc = 0                # line count, for error reporting
with fileinput.FileInput(files=args.input, openhook=fileinput.hook_compressed) as log:
#open(args.fn,"rt") as log:
    for line in log:
        if log.isfirstline():
           print("Processing file", log.filename())
        lc += 1
        # strip any NUL chars from the line
        line = str.replace(line, "\x00", "", -1)
        # and unpack the rtl_433 JSON log record
        try:
            y = json.loads(line)
        except JSONDecodeError as e:
            print("JSON decode error at file line ", fileinput.filelineno())
            print("Line contents:\n", line)
            err = {}
            print("JSON error msg:", err.get("error", str(e)))
            print("\nOr are there null characters in your input file?")
            print("On Linux, try sed \"s/\\x0//g' oldfile.json > newfile.json\" to remove them")
            print("On OSX/Posix, try \"tr -d '\\000' < oldfile.json > newfile.json\"")
            sys.exit(1)
        except TypeError as e:
            print("JSON type error in file line", fileinput.filelineno())
            print("Line contents:\n", line)
            err = {}
            print("JSON error msg:", err.get("error", str(e)))
            sys.exit(1)

        #  Ignore packets with no "model" field
        if "model" not in y:
            continue

        #  Ignore TPMS packets if told to do so
        if not args.include_TPMS:
            if "type" in y and y["type"]=="TPMS":
                continue
        
        #  Statements below make 'model'/'channel'/'id' the key for cataloging and summarizing
        dev = y["model"] + "/"
        if "channel" in y:
            dev += str(y["channel"])
        dev += "/"
        if "id" in y:
            dev += str(y["id"])

        # Convert data values to standard form
        (ts,eTime)   = CnvTime(y["time"])
        snr   = 0.0 if "snr" not in y else float(y["snr"])
        freq  = 0.0 if "freq" not in y else float(y["freq"])
        battery = None if "battery_ok" not in y else y["battery_ok"]
        status  = None if "status"     not in y else y["status"]
        
        # Mark earliest and latest records for reporting
        firstTime = min(eTime, firstTime)
        lastTime  = max(eTime, lastTime)
        
# We keep the following counters as the file is processed:
#   lc = the total number of packets seen, of all types
#   DDTC = the number of de-duplicated transmissions seen
#          Where a transmission may include 1 or up to 6 or more replicated packets
#          Replicated packets may NOT have the same SNR or frequency and so are
#          included in the SNR and Freq statistics.  Data fields not compared.
#          ITGT measures the time between the first packet of one transmission
#          and the first packet of the prior transmission.

        if dev in devices:
            (dup, batt_change, stat_change)  = devices[dev].update(snr, eTime, freq, battery, status)
        else:
            devices[dev] = Data(snr, eTime, freq, battery, status)
            (dup, batt_change, stat_change)  = (False, False, False)
        if not dup:
            DDTC += 1
        if batt_change:
            print("{:<17} to {:>3} for {:<30} at {:<25}".format("battery_ok change", battery, dev, y["time"]))
        if stat_change:
            print("{:<17} to {:>3} for {:<30} at {:<25}".format("status change",     status,  dev, y["time"]))
                 
# Finished processing log files; write summary report
print("\nProcessed", lc, "Packets as", DDTC, "De-Duplicated Transmissions",
      "in {:>5.2f}sec".format(time.process_time()-start_time),
      "\nPackets dated from",time.strftime("%a %Y-%m-%d %H:%M:%S",time.localtime(firstTime)),
       "to", time.strftime("%a %Y-%m-%d %H:%M:%S",time.localtime(lastTime)))
print()

# First, the header, dependent upon cmdline options
print("{:<30} ".format(""), end="")
if not omitSNR:
    print("{:^36}  ".format("Signal-to-Noise"), end="")
if not omitITGT:
    print("{:^36}".format("Inter-Transmission Gap Time"), end="")
if not omitFreq:
    print("    {:^40}".format("Frequency (MHz)"), end="")
if not omitPPT:
    print("    {:^36}  ".format("Packets per Transmit"), end="")
print()
print("{:<30} ".format("Device model/channel/id"), end="")

if not omitSNR:
    print("{:>33} ".format("_"*33), end="")
if not omitITGT:
    print(" {:>40} ".format("_"*39), end="")
if not omitFreq:
    print("  {:>44}".format("_"*44), end="")
if not omitPPT:
    print("   {:>36}".format("_"*36), end="")
print()

print("{:<30} ".format(""), end="")
if not omitSNR:
    print("{:>6} {:>8}  {:>5}  {:>5}".format("#Pkts", "  Mean ±   𝜎", "Min", "Max"), end="")
if not omitITGT:
    print("  {:>7}    {:>13}   {:>5}   {:>5}".format(" #Gaps", "Mean  ±     𝜎", "Min", "Max"), end="")
if not omitFreq:
    print("  {:>7}     {:>5}        {:>5}    {:>5}".format(" #Pkts", "Mean  ±   𝜎", "Min", "Max"), end="")
if not omitPPT:
    print("   {:>7}    {:>5}   {:>5}  {:>5}".format("#Xmits", "Mean ±   𝜎", "Min", "Max"), end="")
print()        

# And now the data values from the table
for d in sorted(devices):
    (pkt, xmt, SNR, ITGT, Freq, PPT) = devices[d].get()
    if pkt < noise:
        continue
    print("{:<30}".format(d), end="")
    if not omitSNR:
        (n,avg,std,min,max) = SNR.get()
        print("{:>7} {:>6.1f} ±{:>5.1f} {:>5.1f}  {:>5.1f}".format(n,avg,std,min,max), end="")
    if not omitITGT:
        if ITGT is not None:
           (n,avg,std,min,max) = ITGT.get()
        else:
           (n,avg,std,min,max) = (0,0.,0.,0.,0.)
        print("  {:>7} {:>7.1f}s ± {:>6.1f}  {:>5.1f} {:>7.1f}".format(n,avg,std,min,max), end="")
    if not omitFreq:
        (n,avg,std,min,max) = Freq.get()
        print("  {:>7}  {:>8.3f} ± {:>6.3f}  {:>8.3f} {:>8.3f}".format(n,avg,std,min,max), end="")
    if not omitPPT:
        if PPT is not None:
            (n,avg,std,min,max) = PPT.get()
        else:
            (n,avg,std,min,max) = (0,0.,0.,0.,0.)
        print("   {:>7}  {:>6.1f} ± {:>4.1f}  {:>5.0f}  {:>5.0f}".format(n,avg,std,min,max), end="")
    print()

sys.exit(0)
